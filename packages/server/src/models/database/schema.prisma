generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int      @id @default(autoincrement())
  email           String   @unique
  name            String?
  password        String   // Required for authentication
  profileComplete Boolean  @default(false) // Track profile completion
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  vouchers        Voucher[]
  transactions    Transaction[]
  zhongcaoResults ZhongcaoResult[]
  menuAnalyses    MenuAnalysis[]
  profile         Profile? // One-to-one relationship with Profile
}

model Profile {
  id                  Int      @id @default(autoincrement())
  userId              Int      @unique // One-to-one relationship with User
  monthlyBudget       Float
  monthlyIncome       Float
  expensePreferences  Json     // Store as JSON for flexibility
  savingsGoals        Json     // Store as JSON for flexibility
  lifestylePreferences Json    // Store dining style and other preferences
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ZhongcaoResult {
  id                  Int      @id @default(autoincrement())
  user_id             Int      // User relationship
  originalFilename    String
  restaurantName      String
  dishName            String?
  address             String?
  description         String
  socialMediaHandle   String?
  processedAt         DateTime
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Voucher {
  id          Int      @id @default(autoincrement())
  user_id     Int
  image_path  String
  parsed_data Json?
  timestamp   DateTime @default(now())
  
  // Relations
  user User @relation(fields: [user_id], references: [id])
  
  @@map("vouchers")
}

model Transaction {
  id                Int      @id @default(autoincrement())
  user_id           Int
  date              DateTime
  amount            Float
  category          String
  merchant          String
  source            String
  receipt_img       String?
  merchant_category String?
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  
  // Relations
  user User @relation(fields: [user_id], references: [id])
  
  @@map("transactions")
}

model MenuAnalysis {
  id            Int      @id @default(autoincrement())
  user_id       Int      // User relationship
  menuData      Json     // Extracted menu items and currency
  budget        Float?   // Budget used for analysis
  userNote      String?  // User's note for the analysis
  imageSize     Int?     // Size of the analyzed image in bytes
  imageMimeType String?  // MIME type of the analyzed image
  isFallback    Boolean  @default(false) // Whether fallback data was used
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}
