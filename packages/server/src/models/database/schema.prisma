generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      Int                        @id @default(autoincrement())
  email                   String                     @unique
  name                    String?
  avatar                  String?                    // 头像URL
  phone                   String?                    // 手机号
  dateOfBirth             DateTime?                  // 生日
  gender                  String?                    // 性别
  location                String?                    // 位置信息
  timezone                String?                    // 时区
  language                String                     @default("en") // 语言偏好
  createdAt               DateTime                   @default(now())
  updatedAt               DateTime                   @updatedAt
  profileComplete         Boolean                    @default(false)
  isEmailVerified         Boolean                    @default(false)
  isPhoneVerified         Boolean                    @default(false)
  lastLoginAt             DateTime?
  password                String

  // 关联关系
  profile                 UserProfile?
  menuAnalyses            MenuAnalysis[]
  zhongcaoResults         ZhongcaoResult[]
  blacklistedTokens       BlacklistedToken[]
  transactions            Transaction[]
  vouchers                Voucher[]
  restaurantSearchHistory RestaurantSearchHistory[]
  behaviors               UserBehavior[]
}

model BlacklistedToken {
  id            Int      @id @default(autoincrement())
  token         String   @unique
  userId        Int
  blacklistedAt DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("blacklisted_tokens")
}

model ZhongcaoResult {
  id                Int      @id @default(autoincrement())
  originalFilename  String
  restaurantName    String
  dishName          String?
  address           String?
  description       String
  socialMediaHandle String?
  processedAt       DateTime
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user_id           Int
  user              User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Voucher {
  id          Int      @id @default(autoincrement())
  user_id     Int
  image_path  String
  parsed_data Json?
  timestamp   DateTime @default(now())
  user        User     @relation(fields: [user_id], references: [id])

  @@map("vouchers")
}

model Transaction {
  id                Int      @id @default(autoincrement())
  user_id           Int
  date              DateTime
  amount            Float
  category          String
  merchant          String
  source            String
  receipt_img       String?
  merchant_category String?
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  user              User     @relation(fields: [user_id], references: [id])

  @@map("transactions")
}

model MenuAnalysis {
  id            Int      @id @default(autoincrement())
  user_id       Int
  menuData      Json
  budget        Float?
  userNote      String?
  imageSize     Int?
  imageMimeType String?
  isFallback    Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model RestaurantSearchHistory {
  id              Int      @id @default(autoincrement())
  user_id         Int
  search_query    String
  location        String?
  search_results  Json     // Store the full recommendation results
  result_count    Int      @default(0)
  user_preferences Json?   // Store user data used for personalization
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  user            User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("restaurant_search_history")
}

model UserProfile {
  id                    Int                @id @default(autoincrement())
  userId                Int                @unique
  user                  User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  // 财务信息
  monthlyIncome         Float?
  monthlyBudget         Float?
  currency              String             @default("USD")
  budgetAllocation      Json?              // 预算分配

  // 饮食偏好
  dietaryRestrictions   String[]           // 饮食限制
  cuisinePreferences    String[]           // 菜系偏好
  allergies             String[]           // 过敏信息
  spiceTolerance        String?            // 辣度承受
  mealTiming            Json?              // 用餐时间偏好

  // 生活方式
  activityLevel         String?            // 活动水平
  healthGoals           String[]           // 健康目标
  cookingSkill          String?            // 烹饪水平
  kitchenEquipment      String[]           // 厨房设备

  // 消费偏好
  priceRangePreference  String?            // 价格区间偏好
  brandPreferences     String[]           // 品牌偏好
  shoppingHabits        Json?              // 购物习惯

  // 通知设置
  emailNotifications    Boolean            @default(true)
  pushNotifications     Boolean            @default(true)
  smsNotifications      Boolean            @default(false)

  // 隐私设置
  profileVisibility     String             @default("private")
  dataSharing           Boolean            @default(false)
  analyticsOptIn        Boolean            @default(false)

  // 系统字段
  completionPercentage  Int                @default(0)
  onboardingStep        Int                @default(0)
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt

  @@map("user_profiles")
}

// 用户行为分析表
model UserBehavior {
  id                Int                @id @default(autoincrement())
  userId            Int
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  actionType        String             // "view", "click", "purchase", "search"
  actionTarget      String             // 操作对象
  actionData        Json?              // 操作详细数据
  sessionId         String?            // 会话ID
  deviceInfo        Json?              // 设备信息
  timestamp         DateTime           @default(now())

  @@map("user_behaviors")
}