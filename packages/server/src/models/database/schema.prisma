generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                @id @default(autoincrement())
  email             String             @unique
  name              String?
  createdAt         DateTime           @default(now())
  password          String
  profileComplete   Boolean            @default(false)
  updatedAt         DateTime           @updatedAt
  menuAnalyses      MenuAnalysis[]
  zhongcaoResults   ZhongcaoResult[]
  blacklistedTokens BlacklistedToken[]
  transactions      Transaction[]
  vouchers          Voucher[]
}

model BlacklistedToken {
  id            Int      @id @default(autoincrement())
  token         String   @unique
  userId        Int
  blacklistedAt DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("blacklisted_tokens")
}

model ZhongcaoResult {
  id                Int      @id @default(autoincrement())
  originalFilename  String
  restaurantName    String
  dishName          String?
  address           String?
  description       String
  socialMediaHandle String?
  processedAt       DateTime
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user_id           Int
  user              User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Voucher {
  id          Int      @id @default(autoincrement())
  user_id     Int
  image_path  String
  parsed_data Json?
  timestamp   DateTime @default(now())
  user        User     @relation(fields: [user_id], references: [id])

  @@map("vouchers")
}

model Transaction {
  id                Int      @id @default(autoincrement())
  user_id           Int
  date              DateTime
  amount            Float
  category          String
  merchant          String
  source            String
  receipt_img       String?
  merchant_category String?
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  user              User     @relation(fields: [user_id], references: [id])

  @@map("transactions")
}

model MenuAnalysis {
  id            Int      @id @default(autoincrement())
  user_id       Int
  menuData      Json
  budget        Float?
  userNote      String?
  imageSize     Int?
  imageMimeType String?
  isFallback    Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}
